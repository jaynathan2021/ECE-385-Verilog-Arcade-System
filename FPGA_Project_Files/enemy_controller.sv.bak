//enemy_controller.sv
//
//Responsible for controlling the behaviour of the enemy array

module enemy_controller
(
	input logic 			v_sync,
	input logic				reset,
	input logic	 [3:0]		state,
	output logic [9:0] 	enemy_posX,	//X offset of the enemy array
	output logic [9:0]	enemy_posY		//Y offset of the enemy array
);


logic x_movement;
logic y_movement;
logic [11:0] x_pos;	//use a subpixel offset to allow for smooth, sloow
										//movement
logic [11:0] y_pos;

assign x_pos = 12'b0;
assign y_pos = 12'b0;

always_ff @ (posedge v_sync or posedge reset) begin

	//by default, don't change position
	x_pos = x_pos;
	y_pos = y_pos;

	if(reset) begin
		x_movement <= 1'b1;
		x_pos <= 12'b0;
		y_movement <= 1'b1;
		y_pos <= 12'b0;
	end

	//update enemy possition
	else if(state == 1 || state == 2 || state == 3 ||state == 6) begin			
		if(y_pos[11:2] >= 10'h20) begin
			y_pos = y_pos + 5;
		end
		else begin
			//if we're moving to the right, then move to the right
			//otherwise move to the left
			x_pos = x_pos + x_movement;
			
			//if we're at the right side, then start moving to the left
			if(x_pos[11:2] >= 10'h20) begin
				x_pos[11:2] = 10'h20;
				x_movement = -1;
			end
			//if we're at the left side, then start moving to the right
			if(x_pos[11:2] == 10'd0) begin
				x_movement = 1;
			end
		end
	end
	
	else if(state == 4 || state == 5 || state == 8) begin
		if(y_pos[11:2] >= 10'h20) begin
			y_pos = y_pos + 5;
		end
		else begin
			y_pos = y_pos + 2;
		end
	end

	else begin
		if(y_pos[11:2] >= 10'h20) begin
			y_pos = y_pos + 5;
		end
		else begin
			x_pos = x_pos + x_movement;
			y_pos = y_pos + 1;

			//if we're at the right side, then start moving to the left
			if(x_pos[11:2] >= 10'd32) begin
				x_pos[11:2] = 10'd32;
				y_pos = y_pos + 1;
				x_movement = -1;
			end
			//if we're at the left side, then start moving to the right
			if(x_pos[11:2] == 10'd0) begin
				y_pos = y_pos + 1;
				x_movement = 1;
			end
		end
	end
end

assign enemy_posX = x_pos[11:2];
assign enemy_posX = y_pos[11:2];


//always_comb begin

	////for one second, use the first animation.
	////for every other second, use the second
	////animation
	//if(counter < 8'd60)
	//	animation_offset = 8'd8;
	//else
	//	animation_offset = 8'd0;
		
//end

endmodule 